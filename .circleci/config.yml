version: 2.1

orbs:
  vro: kohirens/version-release@0.8.0

parameters:
  ssh-finger:
    description: SSH fingerprint.
    type: string
    default: "73:9b:43:f6:57:91:be:f6:0f:a4:c1:05:40:37:ab:79"

jobs:
  co:
    working_directory: ~/repo
    docker:
      - image: circleci/golang:1.17
    steps:
      - checkout
      - restore_cache:
          keys:
            - go-mod-v1-{{ checksum "go.mod" }}
      - run:
          name: Install Dependencies
          command: go mod tidy
      - save_cache:
          key: go-mod-v1-{{ checksum "go.mod" }}
          paths:
            - "/go/pkg/mod"
      - persist_to_workspace:
          root: .
          paths: [ ./* ]

  run-test:
    docker:
      - image: circleci/golang:1.17
    steps:
      - attach_workspace:
          at: .
      - restore_cache:
          keys:
            - go-mod-v1-{{ checksum "go.mod" }}
      - run:
          name: "Unit test"
          command: |
            go test -v

  publish-image:
    docker:
      - image: circleci/golang:1.17
    steps:
      - setup_remote_docker:
          version: 20.10.11
          docker_layer_caching: true
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: "Build"
          command: |
            if [ ! -f ./tagged.txt ]; then
                echo "cannot publish a Docker image, release-tag file not found"
                exit 1
            fi
            export BUILD_VER=$(cat "tagged.txt")
            # need to get the correct commit
            git fetch --all --tags
            git checkout "tags/${BUILD_VER}" -b "publish-${BUILD_VER}"
            git log -1
            echo "BUILD_VER=${BUILD_VER}"
            docker build --build-arg "USER_NAME=circleci" --tag "kohirens/git-tool-belt:${BUILD_VER}" --file .docker/Dockerfile .
            docker login --username "${DH_USER}" --password "${DH_PASS}"
            docker push "kohirens/git-tool-belt:${BUILD_VER}"

  publish-execs:
    docker:
      - image: khalifahks/alpine-cci:0.4.0
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: "Build"
          command: |
            apk add go
            echo "1.0.7" > tagged.txt
            if [ ! -f ./tagged.txt ]; then
                echo "cannot publish a Docker image, release-tag file not found"
                exit 1
            fi
            export BUILD_VER=$(cat "tagged.txt")
            # need to get the correct commit
            git fetch --all --tags
            git checkout "tags/${BUILD_VER}" -b "publish-${BUILD_VER}"
            #!/usr/bin/env bash
            set -e
            package_name="git-tool-belt"
            platforms=("windows/amd64" "windows/386" "linux/amd64" "linux/386")
            declare -a releaseFiles=()
            for platform in "${platforms[@]}"
            do
                platform_split=(${platform//\// })
                GOOS=${platform_split[0]}
                GOARCH=${platform_split[1]}
                output_name="${package_name}-${GOOS}-${GOARCH}"
                if [ "${GOOS}" = "windows" ]; then
                    output_name="${output_name}.exe"
                fi
                echo "building ${output_name}"
                env GOOS=$GOOS GOARCH=$GOARCH go build -o "${output_name}"
                if [ $? -ne 0 ]; then
                    echo 'An error has occurred! Aborting the script execution...'
                    exit 1
                fi
                if [ "${GOOS}" = "windows" ]; then
                    zip "${output_name}.zip" "${output_name}"
                    releaseFiles+=("${output_name}.zip")
                else
                    tar -zcvf "${output_name}.tar.gz" "${output_name}"
                    releaseFiles+=("${output_name}.tar.gz")
                fi
            done
            if [ -z "${releaseFiles}" ]; then
                echo "error no release files found to upload"
                exit 1
            fi
            echo "releaseFiles=${releaseFiles}"
            echo "${GH_TOKE}" > really-i-need-a-file.txt
            gh auth login --with-token < really-i-need-a-file.txt
            for releaseFile in "${releaseFiles[@]}"
            do
                echo "uploading \"${releaseFile}\""
                gh release upload "${BUILD_VER}" "${releaseFile}" --clobber
            done

workflows:
  pull-request:
    jobs:
      - co:
          filters:
            branches:
              ignore: /main|updated-changelog-skip-ci/
      - run-test:
          requires: [ co ]
      - publish-execs:
          requires: [ co ]
          context: orb-publishing
  # Only run when branch is main
  # 1. Update the changelog.
  # 2. Merge the changelog to main, causing tag-and-release to run.
  # 3. Verify there are taggable changes.
  # 4. Publish a release tag.
  auto-release:
    jobs:
      - vro/update-and-merge-changelog: #publish-changelog
          context: orb-publishing
          filters:
            branches:
              only: main
          pre-steps: [ checkout, attach_workspace: { at: '.' } ]
          sshFinger: << pipeline.parameters.ssh-finger >>
      - vro/tag-and-release:
          requires: [ vro/update-and-merge-changelog ]
          context: orb-publishing
          pre-steps: [ checkout, attach_workspace: { at: '.' } ]
      - publish-image:
          requires: [ vro/tag-and-release ]
          context: orb-publishing
      - publish-execs:
          requires: [ vro/tag-and-release ]
          context: orb-publishing
