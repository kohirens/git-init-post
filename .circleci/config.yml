version: 2.1

orbs:
  vro: kohirens/version-release@0.8.0

parameters:
  ssh-finger:
    description: SSH fingerprint.
    type: string
    default: "73:9b:43:f6:57:91:be:f6:0f:a4:c1:05:40:37:ab:79"

jobs:
  co:
    working_directory: ~/repo
    docker:
      - image: circleci/golang:1.17
    steps:
      - checkout
      - restore_cache:
          keys:
            - go-mod-v1-{{ checksum "go.mod" }}
      - run:
          name: Install Dependencies
          command: go mod tidy
      - save_cache:
          key: go-mod-v1-{{ checksum "go.mod" }}
          paths:
            - "/go/pkg/mod"
      - persist_to_workspace:
          root: .
          paths: [ ./* ]

  run-test:
    docker:
      - image: circleci/golang:1.17
    steps:
      - attach_workspace:
          at: .
      - restore_cache:
          keys:
            - go-mod-v1-{{ checksum "go.mod" }}
      - run:
          name: "Unit test"
          command: |
            go test -v

  publish-image:
    docker:
      - image: circleci/golang:1.17
    steps:
      - setup_remote_docker
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: "Build"
          command: |
            ls -la .
            if [ ! -f ./tagged.txt ]; then
                echo "cannot publish an image release tag file not found"
                exit 1
            fi
            export USER_NAME="circleci"
            export REPO="github.com/kohirens/git-tool-belt"
            export BUILD_VER=$(cat "tagged.txt")
            echo "BUILD_VER=${BUILD_VER}"
            export BTARGET="release"
            docker build --tag "kohirens/git-tool-belt:${BUILD_VER}" --file .docker/Dockerfile .
            docker login --username "${DH_USER}" --password "${DH_PASS}"
            docker push "kohirens/git-tool-belt:${BUILD_VER}"
            docker compose -f .docker/docker-compose.yml build

workflows:
  pull-request:
    jobs:
      - co:
          filters:
            branches:
              ignore: /main|updated-changelog-skip-ci/
      - run-test:
          requires: [ co ]
  # Only run when branch is main
  # 1. Update the changelog.
  # 2. Merge the changelog to main, causing tag-and-release to run.
  # 3. Verify there are taggable changes.
  # 4. Publish a release tag.
  auto-release:
    jobs:
      - vro/update-and-merge-changelog: #publish-changelog
          context: orb-publishing
          filters:
            branches:
              only: main
          pre-steps: [ checkout, attach_workspace: { at: '.' } ]
          sshFinger: << pipeline.parameters.ssh-finger >>
      - vro/tag-and-release:
          requires: [ vro/update-and-merge-changelog ]
          context: orb-publishing
          pre-steps: [ checkout, attach_workspace: { at: '.' } ]
      - publish-image:
          requires: [ vro/tag-and-release ]
          context: orb-publishing
