version: 2.1

orbs:
  vro: kohirens/version-release@dev:alpha

parameters:
  ssh_finger:
    description: SSH fingerprint.
    type: string
    default: "73:9b:43:f6:57:91:be:f6:0f:a4:c1:05:40:37:ab:79"
  triggered_by_bot:
    description: Trigger publishing a release tag workflow.
    type: boolean
    default: false

jobs:
  co:
    working_directory: ~/repo
    docker:
      - image: circleci/golang:1.17
    steps:
      - checkout
      - restore_cache:
          keys:
            - go-mod-v1-{{ checksum "go.mod" }}
      - run:
          name: Install Dependencies
          command: go mod tidy
      - save_cache:
          key: go-mod-v1-{{ checksum "go.mod" }}
          paths:
            - "/go/pkg/mod"
      - persist_to_workspace:
          root: .
          paths: [ ./* ]

  run-test:
    docker:
      - image: circleci/golang:1.17
    steps:
      - attach_workspace:
          at: .
      - restore_cache:
          keys:
            - go-mod-v1-{{ checksum "go.mod" }}
      - run:
          name: "Unit test"
          command: |
            go test -v

  publish-image:
    docker:
      - image: circleci/golang:1.17
    steps:
      - setup_remote_docker:
          version: 20.10.11
          docker_layer_caching: true
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: "Build"
          command: |
            echo "Publishing tag '<< pipeline.git.tag >>'"
            export BUILD_VER="<< pipeline.git.tag >>"
            if [ -z "${BUILD_VER}" ]; then
                echo "cannot publish a Docker image, release tag was empty"
                exit 1
            fi
            docker build --build-arg "USER_NAME=circleci" --tag "kohirens/git-tool-belt:${BUILD_VER}" --file .docker/Dockerfile .
            docker login --username "${DH_USER}" --password "${DH_PASS}"
            docker push "kohirens/git-tool-belt:${BUILD_VER}"
            docker rmi "kohirens/git-tool-belt:${BUILD_VER}"

  publish-execs:
    docker:
      - image: kohirens/circleci-go:0.2.1
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: "Build"
          command: |
            echo "Publishing tag '<< pipeline.git.tag >>'"
            export BUILD_VER="<< pipeline.git.tag >>"
            if [ ! -f ./tagged.txt ]; then
                echo "cannot publish executables, release tag was empty"
                exit 1
            fi
            go install
            export PATH="${PATH}:/root/go/bin"
            go generate
            #!/usr/bin/env bash
            set -e
            package_name="git-tool-belt"
            platforms=("windows/amd64" "windows/386" "linux/amd64" "linux/386")
            declare -a releaseFiles=()
            for platform in "${platforms[@]}"
            do
                platform_split=(${platform//\// })
                GOOS=${platform_split[0]}
                GOARCH=${platform_split[1]}
                output_name="${package_name}-${GOOS}-${GOARCH}"
                if [ "${GOOS}" = "windows" ]; then
                    output_name="${output_name}.exe"
                fi
                echo "building ${output_name}"
                env GOOS=$GOOS GOARCH=$GOARCH go build -o "${output_name}"
                if [ $? -ne 0 ]; then
                    echo 'An error has occurred! Aborting the script execution...'
                    exit 1
                fi
                if [ "${GOOS}" = "windows" ]; then
                    zip "${output_name}.zip" "${output_name}"
                    releaseFiles+=("${output_name}.zip")
                else
                    tar -zcvf "${output_name}.tar.gz" "${output_name}"
                    releaseFiles+=("${output_name}.tar.gz")
                fi
            done
            if [ -z "${releaseFiles}" ]; then
                echo "error no release files found to upload"
                exit 1
            fi
            echo "releaseFiles=${releaseFiles}"
            echo "${GH_TOKE}" > really-i-need-a-file.txt
            gh auth login --with-token < really-i-need-a-file.txt
            for releaseFile in "${releaseFiles[@]}"
            do
                echo "uploading \"${releaseFile}\""
                gh release upload "${BUILD_VER}" "${releaseFile}"
            done

filter-semantic-tag: &filter-semantic-tag
  tags:
    only: /^v?\d+\.\d+\.\d+$/
  branches:
    ignore: /.*/

workflows:
  pull-request:
    jobs:
      - co:
          filters:
            branches:
              ignore: /main|updated-changelog-skip-ci/
      - run-test:
          requires: [ co ]

  publish-changelog:
    when:
      and:
        - equal: [main, << pipeline.git.branch >>]
        - equal: [webhook, << pipeline.trigger_source >>]
    jobs:
      - vro/publish-changelog:
          context: orb-publishing
          ssh_finger: << pipeline.parameters.ssh_finger >>

  publish-release-tag:
    when:
      and:
        - equal: [main, << pipeline.git.branch >>]
        - << pipeline.parameters.triggered_by_bot >>
    jobs:
      - vro/tag-and-release:
          context: orb-publishing

  on-tag-release:
    jobs:
      - publish-image:
          context: orb-publishing
          filters:
            <<: *filter-semantic-tag
      - publish-execs:
          context: orb-publishing
          filters:
            <<: *filter-semantic-tag
